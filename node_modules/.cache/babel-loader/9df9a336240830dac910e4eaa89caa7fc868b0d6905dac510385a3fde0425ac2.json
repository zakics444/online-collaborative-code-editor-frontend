{"ast":null,"code":"var _jsxFileName = \"C:\\\\project final\\\\frontend\\\\src\\\\components\\\\Editor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Editor } from '@monaco-editor/react'; // Correct component import\nimport socket from '../services/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditor = () => {\n  _s();\n  const [code, setCode] = useState('');\n\n  // Handle code changes and emit them through WebSocket\n  const handleCodeChange = value => {\n    setCode(value);\n    socket.emit('codeChange', {\n      code: value\n    });\n  };\n  useEffect(() => {\n    // Listen for real-time code updates from other users\n    socket.on('receiveCode', codeData => {\n      setCode(codeData.code);\n    });\n\n    // Clean up the listener on component unmount\n    return () => {\n      socket.off('receiveCode');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '90vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(Editor, {\n      height: \"90vh\",\n      language: \"javascript\" // You can set this dynamically based on user preference\n      ,\n      theme: \"vs-dark\" // You can also use 'vs-light' or 'hc-black'\n      ,\n      value: code,\n      onChange: (ev, value) => handleCodeChange(value) // Correct onChange for Monaco Editor\n      ,\n      options: {\n        automaticLayout: true,\n        minimap: {\n          enabled: true\n        },\n        // Enable/disable minimap (like in VS Code)\n        wordWrap: \"on\" // Word wrap the code\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(CodeEditor, \"ZW29czzba029rFpLXkwMweJBtew=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","Editor","socket","jsxDEV","_jsxDEV","CodeEditor","_s","code","setCode","handleCodeChange","value","emit","on","codeData","off","style","height","children","language","theme","onChange","ev","options","automaticLayout","minimap","enabled","wordWrap","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/project final/frontend/src/components/Editor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Editor } from '@monaco-editor/react';  // Correct component import\r\nimport socket from '../services/socket';\r\n\r\nconst CodeEditor = () => {\r\n    const [code, setCode] = useState('');\r\n\r\n    // Handle code changes and emit them through WebSocket\r\n    const handleCodeChange = (value) => {\r\n        setCode(value);\r\n        socket.emit('codeChange', { code: value });\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Listen for real-time code updates from other users\r\n        socket.on('receiveCode', (codeData) => {\r\n            setCode(codeData.code);\r\n        });\r\n\r\n        // Clean up the listener on component unmount\r\n        return () => {\r\n            socket.off('receiveCode');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ height: '90vh' }}>\r\n            {/* Monaco Editor for a VS Code-like experience */}\r\n            <Editor\r\n                height=\"90vh\"\r\n                language=\"javascript\"  // You can set this dynamically based on user preference\r\n                theme=\"vs-dark\"  // You can also use 'vs-light' or 'hc-black'\r\n                value={code}\r\n                onChange={(ev, value) => handleCodeChange(value)}  // Correct onChange for Monaco Editor\r\n                options={{\r\n                    automaticLayout: true,\r\n                    minimap: { enabled: true },  // Enable/disable minimap (like in VS Code)\r\n                    wordWrap: \"on\",  // Word wrap the code\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CodeEditor;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,sBAAsB,CAAC,CAAE;AAChD,OAAOC,MAAM,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMU,gBAAgB,GAAIC,KAAK,IAAK;IAChCF,OAAO,CAACE,KAAK,CAAC;IACdR,MAAM,CAACS,IAAI,CAAC,YAAY,EAAE;MAAEJ,IAAI,EAAEG;IAAM,CAAC,CAAC;EAC9C,CAAC;EAEDV,SAAS,CAAC,MAAM;IACZ;IACAE,MAAM,CAACU,EAAE,CAAC,aAAa,EAAGC,QAAQ,IAAK;MACnCL,OAAO,CAACK,QAAQ,CAACN,IAAI,CAAC;IAC1B,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACTL,MAAM,CAACY,GAAG,CAAC,aAAa,CAAC;IAC7B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIV,OAAA;IAAKW,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAC,QAAA,eAE3Bb,OAAA,CAACH,MAAM;MACHe,MAAM,EAAC,MAAM;MACbE,QAAQ,EAAC,YAAY,CAAE;MAAA;MACvBC,KAAK,EAAC,SAAS,CAAE;MAAA;MACjBT,KAAK,EAAEH,IAAK;MACZa,QAAQ,EAAEA,CAACC,EAAE,EAAEX,KAAK,KAAKD,gBAAgB,CAACC,KAAK,CAAE,CAAE;MAAA;MACnDY,OAAO,EAAE;QACLC,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAK,CAAC;QAAG;QAC7BC,QAAQ,EAAE,IAAI,CAAG;MACrB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACxB,EAAA,CAtCID,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAwChB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}