{"ast":null,"code":"var _jsxFileName = \"C:\\\\4 working\\\\project final\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport socket from '../services/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [message, setMessage] = useState(''); // State for input message\n  const [chatLog, setChatLog] = useState([]); // State for storing chat log\n\n  // Set up socket listeners\n  useEffect(() => {\n    // Listen for incoming chat messages\n    socket.on('receiveMessage', messageData => {\n      setChatLog(prevLog => [...prevLog, messageData]); // Append new messages to the chat log\n    });\n\n    // Notify when a new user joins the chat\n    socket.on('userJoined', userData => {\n      setChatLog(prevLog => [...prevLog, {\n        message: `${userData.username} has joined the chat!`,\n        systemMessage: true\n      }]);\n    });\n\n    // Clean up socket listeners on component unmount\n    return () => {\n      socket.off('receiveMessage');\n      socket.off('userJoined');\n    };\n  }, []);\n\n  // Emit chat message to the backend\n  const sendMessage = () => {\n    if (message.trim()) {\n      socket.emit('sendMessage', {\n        message\n      });\n      setMessage(''); // Clear the input field after sending\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: chatLog.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: msg.systemMessage ? 'chat-system-message' : 'chat-message',\n        children: msg.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type a message\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"chat-send-button\",\n        disabled: !message.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"KiUGrelVDEwA+7/ciR6KODMICcU=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","socket","jsxDEV","_jsxDEV","Chat","_s","message","setMessage","chatLog","setChatLog","on","messageData","prevLog","userData","username","systemMessage","off","sendMessage","trim","emit","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/4 working/project final/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport socket from '../services/socket';\r\n\r\nconst Chat = () => {\r\n    const [message, setMessage] = useState('');  // State for input message\r\n    const [chatLog, setChatLog] = useState([]);  // State for storing chat log\r\n\r\n    // Set up socket listeners\r\n    useEffect(() => {\r\n        // Listen for incoming chat messages\r\n        socket.on('receiveMessage', (messageData) => {\r\n            setChatLog((prevLog) => [...prevLog, messageData]);  // Append new messages to the chat log\r\n        });\r\n\r\n        // Notify when a new user joins the chat\r\n        socket.on('userJoined', (userData) => {\r\n            setChatLog((prevLog) => [\r\n                ...prevLog,\r\n                { message: `${userData.username} has joined the chat!`, systemMessage: true },\r\n            ]);\r\n        });\r\n\r\n        // Clean up socket listeners on component unmount\r\n        return () => {\r\n            socket.off('receiveMessage');\r\n            socket.off('userJoined');\r\n        };\r\n    }, []);\r\n\r\n    // Emit chat message to the backend\r\n    const sendMessage = () => {\r\n        if (message.trim()) {\r\n            socket.emit('sendMessage', { message });\r\n            setMessage('');  // Clear the input field after sending\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            {/* Chat Messages */}\r\n            <div className=\"chat-messages\">\r\n                {chatLog.map((msg, index) => (\r\n                    <p key={index} className={msg.systemMessage ? 'chat-system-message' : 'chat-message'}>\r\n                        {msg.message}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Chat Input */}\r\n            <div className=\"chat-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Type a message\"\r\n                    className=\"chat-input\"\r\n                />\r\n                <button\r\n                    onClick={sendMessage}\r\n                    className=\"chat-send-button\"\r\n                    disabled={!message.trim()}\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}