{"ast":null,"code":"const express = require('express');\nconst bcrypt = require('bcryptjs'); // Add bcrypt for password hashing\nconst Project = require('../models/Project'); // Import the Project model\nconst authMiddleware = require('../middleware/authMiddleware'); // Import the authMiddleware\nconst router = express.Router();\n\n// Create Project (Protected Route)\nrouter.post('/create', authMiddleware, async (req, res) => {\n  const {\n    pjname,\n    pjpassword\n  } = req.body; // Changed 'projectName' to 'pjname' and kept 'pjpassword'\n\n  try {\n    if (!pjname || !pjpassword) {\n      return res.status(400).json({\n        error: 'Project name and password are required'\n      });\n    }\n    const existingProject = await Project.findOne({\n      pjname\n    }); // Updated query to use 'pjname'\n    if (existingProject) {\n      return res.status(409).json({\n        error: 'Project name already exists'\n      });\n    }\n\n    // Hash the password before saving it\n    const hashedPassword = await bcrypt.hash(pjpassword, 10); // Kept 'pjpassword'\n\n    const newProject = new Project({\n      pjname,\n      // Updated to 'pjname'\n      pjpassword: hashedPassword,\n      // Kept 'pjpassword'\n      owner: req.user.userId,\n      // Set authenticated user as the project owner\n      code: '' // Initialize code as an empty string for new projects\n    });\n    await newProject.save();\n    res.status(201).json({\n      message: 'Project created successfully'\n    });\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).json({\n      error: 'Failed to create project'\n    });\n  }\n});\n\n// Join Project (Protected Route)\nrouter.post('/join', authMiddleware, async (req, res) => {\n  const {\n    pjname,\n    pjpassword\n  } = req.body; // Changed 'projectName' to 'pjname' and kept 'pjpassword'\n\n  try {\n    if (!pjname || !pjpassword) {\n      return res.status(400).json({\n        error: 'Project name and password are required'\n      });\n    }\n    const project = await Project.findOne({\n      pjname\n    }); // Updated query to use 'pjname'\n\n    if (!project) {\n      return res.status(404).json({\n        error: 'Project not found'\n      });\n    }\n\n    // Compare hashed password\n    const isPasswordMatch = await bcrypt.compare(pjpassword, project.pjpassword); // Kept 'pjpassword'\n    if (!isPasswordMatch) {\n      return res.status(401).json({\n        error: 'Invalid project credentials'\n      });\n    }\n\n    // Return the project code to the user when they join\n    res.status(200).json({\n      message: 'Joined project successfully',\n      code: project.code\n    });\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).json({\n      error: 'Failed to join project'\n    });\n  }\n});\n\n// Save Code (POST request to save the code to a project)\nrouter.post('/saveCode/:pjname', authMiddleware, async (req, res) => {\n  // Updated to use 'pjname'\n  const {\n    pjname\n  } = req.params; // Updated to use 'pjname'\n  const {\n    code\n  } = req.body;\n  try {\n    const project = await Project.findOne({\n      pjname\n    }); // Updated query to use 'pjname'\n\n    if (!project) {\n      return res.status(404).json({\n        error: 'Project not found'\n      });\n    }\n    project.code = code; // Save code to the project's code field\n    await project.save();\n    res.status(200).json({\n      message: 'Code saved successfully'\n    });\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).json({\n      error: 'Failed to save code'\n    });\n  }\n});\n\n// Fetch Project Code (Using project name and password)\nrouter.get('/projects/:pjname/:pjpassword', async (req, res) => {\n  // Updated to use 'pjname' and 'pjpassword'\n  const {\n    pjname,\n    pjpassword\n  } = req.params; // Updated to use 'pjname' and 'pjpassword'\n\n  try {\n    const project = await Project.findOne({\n      pjname\n    }); // Updated query to use 'pjname'\n\n    if (!project) {\n      return res.status(404).json({\n        error: 'Project not found'\n      });\n    }\n\n    // Compare hashed password\n    const isPasswordMatch = await bcrypt.compare(pjpassword, project.pjpassword); // Kept 'pjpassword'\n    if (!isPasswordMatch) {\n      return res.status(401).json({\n        error: 'Invalid project credentials'\n      });\n    }\n\n    // Return project code if found\n    res.status(200).json({\n      code: project.code\n    });\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).json({\n      error: 'Failed to fetch project code'\n    });\n  }\n});\nmodule.exports = router; // Export the router","map":{"version":3,"names":["express","require","bcrypt","Project","authMiddleware","router","Router","post","req","res","pjname","pjpassword","body","status","json","error","existingProject","findOne","hashedPassword","hash","newProject","owner","user","userId","code","save","message","console","project","isPasswordMatch","compare","params","get","module","exports"],"sources":["C:/project final/frontend/src/components/Project.js"],"sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcryptjs');  // Add bcrypt for password hashing\r\nconst Project = require('../models/Project');  // Import the Project model\r\nconst authMiddleware = require('../middleware/authMiddleware');  // Import the authMiddleware\r\nconst router = express.Router();\r\n\r\n// Create Project (Protected Route)\r\nrouter.post('/create', authMiddleware, async (req, res) => {\r\n    const { pjname, pjpassword } = req.body;  // Changed 'projectName' to 'pjname' and kept 'pjpassword'\r\n\r\n    try {\r\n        if (!pjname || !pjpassword) {\r\n            return res.status(400).json({ error: 'Project name and password are required' });\r\n        }\r\n\r\n        const existingProject = await Project.findOne({ pjname });  // Updated query to use 'pjname'\r\n        if (existingProject) {\r\n            return res.status(409).json({ error: 'Project name already exists' });\r\n        }\r\n\r\n        // Hash the password before saving it\r\n        const hashedPassword = await bcrypt.hash(pjpassword, 10);  // Kept 'pjpassword'\r\n\r\n        const newProject = new Project({\r\n            pjname,  // Updated to 'pjname'\r\n            pjpassword: hashedPassword,  // Kept 'pjpassword'\r\n            owner: req.user.userId,  // Set authenticated user as the project owner\r\n            code: ''  // Initialize code as an empty string for new projects\r\n        });\r\n\r\n        await newProject.save();\r\n        res.status(201).json({ message: 'Project created successfully' });\r\n    } catch (error) {\r\n        console.error(error.message);\r\n        res.status(500).json({ error: 'Failed to create project' });\r\n    }\r\n});\r\n\r\n// Join Project (Protected Route)\r\nrouter.post('/join', authMiddleware, async (req, res) => {\r\n    const { pjname, pjpassword } = req.body;  // Changed 'projectName' to 'pjname' and kept 'pjpassword'\r\n\r\n    try {\r\n        if (!pjname || !pjpassword) {\r\n            return res.status(400).json({ error: 'Project name and password are required' });\r\n        }\r\n\r\n        const project = await Project.findOne({ pjname });  // Updated query to use 'pjname'\r\n\r\n        if (!project) {\r\n            return res.status(404).json({ error: 'Project not found' });\r\n        }\r\n\r\n        // Compare hashed password\r\n        const isPasswordMatch = await bcrypt.compare(pjpassword, project.pjpassword);  // Kept 'pjpassword'\r\n        if (!isPasswordMatch) {\r\n            return res.status(401).json({ error: 'Invalid project credentials' });\r\n        }\r\n\r\n        // Return the project code to the user when they join\r\n        res.status(200).json({ message: 'Joined project successfully', code: project.code });\r\n    } catch (error) {\r\n        console.error(error.message);\r\n        res.status(500).json({ error: 'Failed to join project' });\r\n    }\r\n});\r\n\r\n// Save Code (POST request to save the code to a project)\r\nrouter.post('/saveCode/:pjname', authMiddleware, async (req, res) => {  // Updated to use 'pjname'\r\n    const { pjname } = req.params;  // Updated to use 'pjname'\r\n    const { code } = req.body;\r\n\r\n    try {\r\n        const project = await Project.findOne({ pjname });  // Updated query to use 'pjname'\r\n\r\n        if (!project) {\r\n            return res.status(404).json({ error: 'Project not found' });\r\n        }\r\n\r\n        project.code = code;  // Save code to the project's code field\r\n        await project.save();\r\n\r\n        res.status(200).json({ message: 'Code saved successfully' });\r\n    } catch (error) {\r\n        console.error(error.message);\r\n        res.status(500).json({ error: 'Failed to save code' });\r\n    }\r\n});\r\n\r\n// Fetch Project Code (Using project name and password)\r\nrouter.get('/projects/:pjname/:pjpassword', async (req, res) => {  // Updated to use 'pjname' and 'pjpassword'\r\n    const { pjname, pjpassword } = req.params;  // Updated to use 'pjname' and 'pjpassword'\r\n\r\n    try {\r\n        const project = await Project.findOne({ pjname });  // Updated query to use 'pjname'\r\n\r\n        if (!project) {\r\n            return res.status(404).json({ error: 'Project not found' });\r\n        }\r\n\r\n        // Compare hashed password\r\n        const isPasswordMatch = await bcrypt.compare(pjpassword, project.pjpassword);  // Kept 'pjpassword'\r\n        if (!isPasswordMatch) {\r\n            return res.status(401).json({ error: 'Invalid project credentials' });\r\n        }\r\n\r\n        // Return project code if found\r\n        res.status(200).json({ code: project.code });\r\n    } catch (error) {\r\n        console.error(error.message);\r\n        res.status(500).json({ error: 'Failed to fetch project code' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;  // Export the router\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}